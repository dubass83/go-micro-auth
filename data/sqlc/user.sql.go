// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const delete = `-- name: Delete :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const deleteByID = `-- name: DeleteByID :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteByID, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, email, first_name, last_name, password, active, updated_at, created_at FROM users
ORDER by last_name
LIMIT $1
OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Password,
			&i.Active,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, email, first_name, last_name, password, active, updated_at, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Active,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOne = `-- name: GetOne :one
SELECT id, email, first_name, last_name, password, active, updated_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOne(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getOne, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Active,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const insert = `-- name: Insert :one
INSERT INTO users (
  email, first_name, last_name, password, active
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, first_name, last_name, password, active, updated_at, created_at
`

type InsertParams struct {
	Email     string      `json:"email"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Password  string      `json:"password"`
	Active    int32       `json:"active"`
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) (User, error) {
	row := q.db.QueryRow(ctx, insert,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Active,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE users 
SET 
  first_name = COALESCE($1, first_name),
  last_name = COALESCE($2, last_name),
  email = COALESCE($3, email),
  active = COALESCE($4, active),
  updated_at = COALESCE($5, updated_at)
WHERE 
  id = $6
RETURNING id, email, first_name, last_name, password, active, updated_at, created_at
`

type UpdateParams struct {
	FirstName pgtype.Text        `json:"first_name"`
	LastName  pgtype.Text        `json:"last_name"`
	Email     pgtype.Text        `json:"email"`
	Active    pgtype.Int4        `json:"active"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        int32              `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Active,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Active,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
